public class org.springframework.samples.petclinic.repository.jdbc.JdbcOwnerRepositoryImpl extends java.lang.Object implements org.springframework.samples.petclinic.repository.OwnerRepository
{
    private org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate namedParameterJdbcTemplate;
    private org.springframework.jdbc.core.simple.SimpleJdbcInsert insertOwner;

    public void <init>(javax.sql.DataSource)
    {
        org.springframework.samples.petclinic.repository.jdbc.JdbcOwnerRepositoryImpl r0;
        javax.sql.DataSource r1;
        org.springframework.jdbc.core.simple.SimpleJdbcInsert $r2, $r3, $r5;
        java.lang.String[] $r4;
        org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate $r6;

        r0 := @this: org.springframework.samples.petclinic.repository.jdbc.JdbcOwnerRepositoryImpl;
        r1 := @parameter0: javax.sql.DataSource;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r2 = new org.springframework.jdbc.core.simple.SimpleJdbcInsert;
        specialinvoke $r2.<org.springframework.jdbc.core.simple.SimpleJdbcInsert: void <init>(javax.sql.DataSource)>(r1);
        $r3 = virtualinvoke $r2.<org.springframework.jdbc.core.simple.SimpleJdbcInsert: org.springframework.jdbc.core.simple.SimpleJdbcInsert withTableName(java.lang.String)>("owners");
        $r4 = newarray (java.lang.String)[1];
        $r4[0] = "id";
        $r5 = virtualinvoke $r3.<org.springframework.jdbc.core.simple.SimpleJdbcInsert: org.springframework.jdbc.core.simple.SimpleJdbcInsert usingGeneratedKeyColumns(java.lang.String[])>($r4);
        r0.<org.springframework.samples.petclinic.repository.jdbc.JdbcOwnerRepositoryImpl: org.springframework.jdbc.core.simple.SimpleJdbcInsert insertOwner> = $r5;
        $r6 = new org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
        specialinvoke $r6.<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: void <init>(javax.sql.DataSource)>(r1);
        r0.<org.springframework.samples.petclinic.repository.jdbc.JdbcOwnerRepositoryImpl: org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate namedParameterJdbcTemplate> = $r6;
        return;
    }

    public java.util.Collection findByLastName(java.lang.String) throws org.springframework.dao.DataAccessException
    {
        org.springframework.samples.petclinic.repository.jdbc.JdbcOwnerRepositoryImpl r0;
        java.lang.String r1, $r6, $r8;
        java.util.HashMap $r2, r3;
        java.lang.StringBuilder $r4, $r7;
        java.util.List r5;
        org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate $r10;
        org.springframework.jdbc.core.BeanPropertyRowMapper $r11;

        r0 := @this: org.springframework.samples.petclinic.repository.jdbc.JdbcOwnerRepositoryImpl;
        r1 := @parameter0: java.lang.String;
        $r2 = new java.util.HashMap;
        specialinvoke $r2.<java.util.HashMap: void <init>()>();
        r3 = $r2;
        $r4 = new java.lang.StringBuilder;
        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);
        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>($r6);
        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%");
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("lastName", $r8);
        $r10 = r0.<org.springframework.samples.petclinic.repository.jdbc.JdbcOwnerRepositoryImpl: org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate namedParameterJdbcTemplate>;
        $r11 = staticinvoke <org.springframework.jdbc.core.BeanPropertyRowMapper: org.springframework.jdbc.core.BeanPropertyRowMapper newInstance(java.lang.Class)>(class "org/springframework/samples/petclinic/model/Owner");
        r5 = virtualinvoke $r10.<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: java.util.List query(java.lang.String,java.util.Map,org.springframework.jdbc.core.RowMapper)>("SELECT id, first_name, last_name, address, city, telephone FROM owners WHERE last_name like :lastName", r3, $r11);
        specialinvoke r0.<org.springframework.samples.petclinic.repository.jdbc.JdbcOwnerRepositoryImpl: void loadOwnersPetsAndVisits(java.util.List)>(r5);
        return r5;
    }

    public org.springframework.samples.petclinic.model.Owner findById(int) throws org.springframework.dao.DataAccessException
    {
        org.springframework.samples.petclinic.repository.jdbc.JdbcOwnerRepositoryImpl r0;
        int i0;
        java.util.HashMap $r1, r2;
        org.springframework.samples.petclinic.model.Owner r3;
        java.lang.Integer $r4, $r12;
        org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate $r6;
        org.springframework.jdbc.core.BeanPropertyRowMapper $r7;
        java.lang.Object $r8;
        org.springframework.dao.EmptyResultDataAccessException $r9, r10;
        org.springframework.orm.ObjectRetrievalFailureException $r11;

        r0 := @this: org.springframework.samples.petclinic.repository.jdbc.JdbcOwnerRepositoryImpl;
        i0 := @parameter0: int;

     label0:
        $r1 = new java.util.HashMap;
        specialinvoke $r1.<java.util.HashMap: void <init>()>();
        r2 = $r1;
        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);
        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("id", $r4);
        $r6 = r0.<org.springframework.samples.petclinic.repository.jdbc.JdbcOwnerRepositoryImpl: org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate namedParameterJdbcTemplate>;
        $r7 = staticinvoke <org.springframework.jdbc.core.BeanPropertyRowMapper: org.springframework.jdbc.core.BeanPropertyRowMapper newInstance(java.lang.Class)>(class "org/springframework/samples/petclinic/model/Owner");
        $r8 = virtualinvoke $r6.<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: java.lang.Object queryForObject(java.lang.String,java.util.Map,org.springframework.jdbc.core.RowMapper)>("SELECT id, first_name, last_name, address, city, telephone FROM owners WHERE id= :id", r2, $r7);
        r3 = (org.springframework.samples.petclinic.model.Owner) $r8;

     label1:
        goto label3;

     label2:
        $r9 := @caughtexception;
        r10 = $r9;
        $r11 = new org.springframework.orm.ObjectRetrievalFailureException;
        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);
        specialinvoke $r11.<org.springframework.orm.ObjectRetrievalFailureException: void <init>(java.lang.Class,java.lang.Object)>(class "org/springframework/samples/petclinic/model/Owner", $r12);
        throw $r11;

     label3:
        virtualinvoke r0.<org.springframework.samples.petclinic.repository.jdbc.JdbcOwnerRepositoryImpl: void loadPetsAndVisits(org.springframework.samples.petclinic.model.Owner)>(r3);
        return r3;

        catch org.springframework.dao.EmptyResultDataAccessException from label0 to label1 with label2;
    }

    public void loadPetsAndVisits(org.springframework.samples.petclinic.model.Owner)
    {
        org.springframework.samples.petclinic.repository.jdbc.JdbcOwnerRepositoryImpl r0;
        org.springframework.samples.petclinic.model.Owner r1;
        java.util.HashMap $r2, r3;
        org.springframework.samples.petclinic.repository.jdbc.JdbcPetVisitExtractor $r4;
        java.util.List r5;
        java.util.Collection r6;
        java.util.Iterator r7;
        org.springframework.samples.petclinic.repository.jdbc.JdbcPet r8;
        java.lang.Integer $r9;
        org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate $r11;
        java.lang.Object $r12, $r13;
        int $i0;
        org.springframework.samples.petclinic.model.BaseEntity $r14;
        org.springframework.samples.petclinic.model.PetType $r15;
        boolean $z0;

        r0 := @this: org.springframework.samples.petclinic.repository.jdbc.JdbcOwnerRepositoryImpl;
        r1 := @parameter0: org.springframework.samples.petclinic.model.Owner;
        $r2 = new java.util.HashMap;
        specialinvoke $r2.<java.util.HashMap: void <init>()>();
        r3 = $r2;
        $r9 = virtualinvoke r1.<org.springframework.samples.petclinic.model.Owner: java.lang.Integer getId()>();
        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("id", $r9);
        $r11 = r0.<org.springframework.samples.petclinic.repository.jdbc.JdbcOwnerRepositoryImpl: org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate namedParameterJdbcTemplate>;
        $r4 = new org.springframework.samples.petclinic.repository.jdbc.JdbcPetVisitExtractor;
        specialinvoke $r4.<org.springframework.samples.petclinic.repository.jdbc.JdbcPetVisitExtractor: void <init>()>();
        $r12 = virtualinvoke $r11.<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: java.lang.Object query(java.lang.String,java.util.Map,org.springframework.jdbc.core.ResultSetExtractor)>("SELECT pets.id, name, birth_date, type_id, owner_id, visits.id as visit_id, visit_date, description, pet_id FROM pets LEFT OUTER JOIN visits ON  pets.id = pet_id WHERE owner_id=:id", r3, $r4);
        r5 = (java.util.List) $r12;
        r6 = virtualinvoke r0.<org.springframework.samples.petclinic.repository.jdbc.JdbcOwnerRepositoryImpl: java.util.Collection getPetTypes()>();
        r7 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>();
        goto label1;

     label0:
        $r13 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();
        r8 = (org.springframework.samples.petclinic.repository.jdbc.JdbcPet) $r13;
        $i0 = virtualinvoke r8.<org.springframework.samples.petclinic.repository.jdbc.JdbcPet: int getTypeId()>();
        $r14 = staticinvoke <org.springframework.samples.petclinic.util.EntityUtils: org.springframework.samples.petclinic.model.BaseEntity getById(java.util.Collection,java.lang.Class,int)>(r6, class "org/springframework/samples/petclinic/model/PetType", $i0);
        $r15 = (org.springframework.samples.petclinic.model.PetType) $r14;
        virtualinvoke r8.<org.springframework.samples.petclinic.repository.jdbc.JdbcPet: void setType(org.springframework.samples.petclinic.model.PetType)>($r15);
        virtualinvoke r1.<org.springframework.samples.petclinic.model.Owner: void addPet(org.springframework.samples.petclinic.model.Pet)>(r8);

     label1:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();
        if $z0 != 0 goto label0;

        return;
    }

    public void save(org.springframework.samples.petclinic.model.Owner) throws org.springframework.dao.DataAccessException
    {
        org.springframework.samples.petclinic.repository.jdbc.JdbcOwnerRepositoryImpl r0;
        org.springframework.samples.petclinic.model.Owner r1;
        org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource $r2, r3;
        java.lang.Number r4;
        boolean $z0;
        org.springframework.jdbc.core.simple.SimpleJdbcInsert $r5;
        int $i0;
        java.lang.Integer $r6;
        org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate $r7;

        r0 := @this: org.springframework.samples.petclinic.repository.jdbc.JdbcOwnerRepositoryImpl;
        r1 := @parameter0: org.springframework.samples.petclinic.model.Owner;
        $r2 = new org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource;
        specialinvoke $r2.<org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource: void <init>(java.lang.Object)>(r1);
        r3 = $r2;
        $z0 = virtualinvoke r1.<org.springframework.samples.petclinic.model.Owner: boolean isNew()>();
        if $z0 == 0 goto label0;

        $r5 = r0.<org.springframework.samples.petclinic.repository.jdbc.JdbcOwnerRepositoryImpl: org.springframework.jdbc.core.simple.SimpleJdbcInsert insertOwner>;
        r4 = virtualinvoke $r5.<org.springframework.jdbc.core.simple.SimpleJdbcInsert: java.lang.Number executeAndReturnKey(org.springframework.jdbc.core.namedparam.SqlParameterSource)>(r3);
        $i0 = virtualinvoke r4.<java.lang.Number: int intValue()>();
        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);
        virtualinvoke r1.<org.springframework.samples.petclinic.model.Owner: void setId(java.lang.Integer)>($r6);
        goto label1;

     label0:
        $r7 = r0.<org.springframework.samples.petclinic.repository.jdbc.JdbcOwnerRepositoryImpl: org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate namedParameterJdbcTemplate>;
        virtualinvoke $r7.<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: int update(java.lang.String,org.springframework.jdbc.core.namedparam.SqlParameterSource)>("UPDATE owners SET first_name=:firstName, last_name=:lastName, address=:address, city=:city, telephone=:telephone WHERE id=:id", r3);

     label1:
        return;
    }

    public java.util.Collection getPetTypes() throws org.springframework.dao.DataAccessException
    {
        org.springframework.samples.petclinic.repository.jdbc.JdbcOwnerRepositoryImpl r0;
        java.util.HashMap $r1;
        org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate $r2;
        org.springframework.jdbc.core.BeanPropertyRowMapper $r3;
        java.util.List $r4;

        r0 := @this: org.springframework.samples.petclinic.repository.jdbc.JdbcOwnerRepositoryImpl;
        $r2 = r0.<org.springframework.samples.petclinic.repository.jdbc.JdbcOwnerRepositoryImpl: org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate namedParameterJdbcTemplate>;
        $r1 = new java.util.HashMap;
        specialinvoke $r1.<java.util.HashMap: void <init>()>();
        $r3 = staticinvoke <org.springframework.jdbc.core.BeanPropertyRowMapper: org.springframework.jdbc.core.BeanPropertyRowMapper newInstance(java.lang.Class)>(class "org/springframework/samples/petclinic/model/PetType");
        $r4 = virtualinvoke $r2.<org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate: java.util.List query(java.lang.String,java.util.Map,org.springframework.jdbc.core.RowMapper)>("SELECT id, name FROM types ORDER BY name", $r1, $r3);
        return $r4;
    }

    private void loadOwnersPetsAndVisits(java.util.List)
    {
        org.springframework.samples.petclinic.repository.jdbc.JdbcOwnerRepositoryImpl r0;
        java.util.List r1;
        java.util.Iterator r2;
        org.springframework.samples.petclinic.model.Owner r3;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: org.springframework.samples.petclinic.repository.jdbc.JdbcOwnerRepositoryImpl;
        r1 := @parameter0: java.util.List;
        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();
        goto label1;

     label0:
        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();
        r3 = (org.springframework.samples.petclinic.model.Owner) $r4;
        virtualinvoke r0.<org.springframework.samples.petclinic.repository.jdbc.JdbcOwnerRepositoryImpl: void loadPetsAndVisits(org.springframework.samples.petclinic.model.Owner)>(r3);

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();
        if $z0 != 0 goto label0;

        return;
    }
}
